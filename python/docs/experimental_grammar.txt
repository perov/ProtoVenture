<symbol> -> /[a-zA-Z_][a-zA-Z_0-9]*/
<number> -> /(-?\d+\.?\d*)|(-?\d*\.?\d+)/
<integer> -> /\d+/
<string> -> /"([^"\]|\\"|\\\\|\\\/|\\r|\\b|\\n|\\t|\\f|\\[0-7]{3})*"/
<null> -> null
<boolean> -> true
<boolean> -> false

<json_list> -> [ ]
<json_list> -> [ <json_value>, [, <json_value>]* ]

<json_object> -> { }
<json_objects> -> { <string> : <json_value> [, <string> : <json_value>]* }

<json_value> -> <string>
<json_value> -> <number>
<json_value> -> <json_object>
<json_value> -> <json_list>
<json_value> -> <boolean>
<json_value> -> <null>

<value> -> <symbol> < <json_value> >

<number_literal> -> <number>
<boolean_literal> -> <boolean>

<literal> -> <number_literal>
<literal> -> <value>
<literal> -> <boolean_literal>

<symbol_args> -> ( )
<symbol_args> -> ( <symbol> [, <symbol>]* )

<expression_args> -> ( )
<expression_args> -> ( <expression> [, <expression>]* )

<assignments> -> <expression> = <expression>
<assignments> -> <assignments> <expression> = <expression>

<optional_let> -> <expression>                    # Not a let expression
<optional_let> -> <assignments> <expression>

<identity> -> ( <expression> )
<proc> -> proc <symbol_args> { <optional_let> }
<let> -> { <assignments> <expression> }
<if_else> -> if ( <optional_let> ) { <optional_let> } else { <optional_let> }

<non_fn_expression> -> <identity>
<non_fn_expression> -> <proc>
<non_fn_expression> -> <if_else>
<non_fn_expression> -> <let>
<non_fn_expression> -> <literal>
<non_fn_expression> -> <symbol>

<fn_application> -> <non_fn_expression>
<fn_application> -> <fn_application> <expression_args>

<exponent> -> <fn_application>
<exponent> -> <fn_application> ** <exponent>    #right to left

<mul_div> -> <exponent>
<mul_div> -> <mul_div> * <exponent>             #left to right
<mul_div> -> <mul_div> / <exponent>

<add_sub> -> <mul_div>
<add_sub> -> <add_sub> + <mul_div>              #left to right
<add_sub> -> <add_sub> - <mul_div>

<comparison> -> <add_sub>
<comparison> -> <comparison> <= <add_sub>       #left to right
<comparison> -> <comparison> >= <add_sub>
<comparison> -> <comparison> < <add_sub>
<comparison> -> <comparison> > <add_sub>

<equality> -> <comparison>
<equality> -> <equality> == <comparison>        #left to right
<equality> -> <equality> != <comparison>

<boolean_and> -> <equality>
<boolean_and> -> <boolean_and> && <equality>            #left to right

<boolean_or> -> <boolean_and>
<boolean_or> -> <boolean_or> || <and>                   #left to right

<expression> -> <boolean_or>

<directive_id> -> <symbol>
<directive_id> -> <integer>

#NOTE: directive commands are case insensitive
<assume> -> assume <expression> = <expression>
<predict> -> predict <expression>
<observe> -> observe <expression> = <literal>
<forget> -> forget <directive_id>
<sample> -> sample <expression>
<force> -> force <expression> = <literal>
<infer> -> infer <integer>
<resample> -> resample

<named_directive> -> <symbol> : <assume>
<named_directive> -> <symbol> : <predict>
<named_directive> -> <symbol> : <observe>

<unnamed_directive> -> <assume>
<unnamed_directive> -> <predict>
<unnamed_directive> -> <observe>
<unnamed_directive> -> <forget>
<unnamed_directive> -> <sample>
<unnamed_directive> -> <force>
<unnamed_directive> -> <infer>
<unnamed_directive> -> <resample>

<directive> -> <named_directive>
<directive> -> <unnamed_directive>

<program> -> <directive>
<program> -> <program> <directive>
